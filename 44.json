{
    "file_path": "security_data/gpt3_security_vulnerability_scanner-main/Format String Attacks/vuln.c",
    "vulnerability": "Vulnerabilities Detected:\n1. Unchecked return value of fopen() - The return value of fopen() is not checked, which could lead to a segmentation fault if the file is not found.\n2. Unchecked return value of system() - The return value of system() is not checked, which could lead to unexpected behavior if the command fails.\n3. Unbounded read of user input - The user input is read into a fixed-size buffer, which could lead to a buffer overflow if the user input is too long.\n4. Unchecked return value of malloc() - The return value of malloc() is not checked, which could lead to unexpected behavior if the memory allocation fails.\n5. Unchecked return value of scanf() - The return value of scanf() is not checked, which could lead to unexpected behavior if the user input is invalid.",
    "source code": "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <time.h>\n\n#define FLAG_BUFFER 128\n#define MAX_SYM_LEN 4\n\ntypedef struct Stonks {\n\tint shares;\n\tchar symbol[MAX_SYM_LEN + 1];\n\tstruct Stonks *next;\n} Stonk;\n\ntypedef struct Portfolios {\n\tint money;\n\tStonk *head;\n} Portfolio;\n\nint view_portfolio(Portfolio *p) {\n\tif (!p) {\n\t\treturn 1;\n\t}\n\tprintf(\"\\nPortfolio as of \");\n\tfflush(stdout);\n\tsystem(\"date\"); // TODO: implement this in C\n\tfflush(stdout);\n\n\tprintf(\"\\n\\n\");\n\tStonk *head = p->head;\n\tif (!head) {\n\t\tprintf(\"You don't own any stonks!\\n\");\n\t}\n\twhile (head) {\n\t\tprintf(\"%d shares of %s\\n\", head->shares, head->symbol);\n\t\thead = head->next;\n\t}\n\treturn 0;\n}\n\nStonk *pick_symbol_with_AI(int shares) {\n\tif (shares < 1) {\n\t\treturn NULL;\n\t}\n\tStonk *stonk = malloc(sizeof(Stonk));\n\tstonk->shares = shares;\n\n\tint AI_symbol_len = (rand() % MAX_SYM_LEN) + 1;\n\tfor (int i = 0; i <= MAX_SYM_LEN; i++) {\n\t\tif (i < AI_symbol_len) {\n\t\t\tstonk->symbol[i] = 'A' + (rand() % 26);\n\t\t} else {\n\t\t\tstonk->symbol[i] = '\\0';\n\t\t}\n\t}\n\n\tstonk->next = NULL;\n\n\treturn stonk;\n}\n\nint buy_stonks(Portfolio *p) {\n\tif (!p) {\n\t\treturn 1;\n\t}\n\tchar api_buf[FLAG_BUFFER];\n\tFILE *f = fopen(\"api\",\"r\");\n\tif (!f) {\n\t\tprintf(\"Flag file not found. Contact an admin.\\n\");\n\t\texit(1);\n\t}\n\tfgets(api_buf, FLAG_BUFFER, f);\n\n\tint money = p->money;\n\tint shares = 0;\n\tStonk *temp = NULL;\n\tprintf(\"Using patented AI algorithms to buy stonks\\n\");\n\twhile (money > 0) {\n\t\tshares = (rand() % money) + 1;\n\t\ttemp = pick_symbol_with_AI(shares);\n\t\ttemp->next = p->head;\n\t\tp->head = temp;\n\t\tmoney -= shares;\n\t}\n\tprintf(\"Stonks chosen\\n\");\n\n\t// TODO: Figure out how to read token from file, for now just ask\n\n\tchar *user_buf = malloc(300 + 1);\n\tprintf(\"What is your API token?\\n\");\n\tscanf(\"%300s\", user_buf);\n\tprintf(\"Buying stonks with token:\\n\");\n\tprintf(user_buf);\n\n\t// TODO: Actually use key to interact with API\n\n\tview_portfolio(p);\n\n\treturn 0;\n}\n\nPortfolio *initialize_portfolio() {\n\tPortfolio *p = malloc(sizeof(Portfolio));\n\tp->money = (rand() % 2018) + 1;\n\tp->head = NULL;\n\treturn p;\n}\n\nvoid free_portfolio(Portfolio *p) {\n\tStonk *current = p->head;\n\tStonk *next = NULL;\n\twhile (current) {\n\t\tnext = current->next;\n\t\tfree(current);\n\t\tcurrent = next;\n\t}\n\tfree(p);\n}\n\nint main(int argc, char *argv[])\n{\n\tsetbuf(stdout, NULL);\n\tsrand(time(NULL));\n\tPortfolio *p = initialize_portfolio();\n\tif (!p) {\n\t\tprintf(\"Memory failure\\n\");\n\t\texit(1);\n\t}\n\n\tint resp = 0;\n\n\tprintf(\"Welcome back to the trading app!\\n\\n\");\n\tprintf(\"What would you like to do?\\n\");\n\tprintf(\"1) Buy some stonks!\\n\");\n\tprintf(\"2) View my portfolio\\n\");\n\tscanf(\"%d\", &resp);\n\n\tif (resp == 1) {\n\t\tbuy_stonks(p);\n\t} else if (resp == 2) {\n\t\tview_portfolio(p);\n\t}\n\n\tfree_portfolio(p);\n\tprintf(\"Goodbye!\\n\");\n\n\texit(0);\n}\n",
    "language": "c",
    "cwe_identifier": [
        "CWE-338"
    ],
    "pattern_desc": [
        "Using rand() for random number generation is insecure due to weakness of the underlying algorithm"
    ],
    "line_number": [
        48
    ],
    "line_text": [
        "\tint AI_symbol_len = (rand() % MAX_SYM_LEN) + 1;"
    ],
    "pattern_id": [
        "C-W-017"
    ],
    "rule": [
        "{ rand(); }"
    ],
    "label": 1
}